Plan-file for Asteroids game, made with C++ using Raylib-library. Text generated by ChatGPT-4 (unedited).

Classic Asteroids Game Overview

Gameplay: In Asteroids, you control a spaceship in the middle of space. The main objective is to destroy asteroids and flying saucers without being hit by them or their shots. The game area is a wraparound screen, meaning if you go off one edge, you appear on the opposite side.

Controls:

Move Forward: Propel the spaceship forward.
Rotate: Turn the spaceship left or right.
Fire: Shoot bullets to break asteroids into smaller pieces or destroy them.
Hyperspace: Disappear and reappear in a random location on the screen, used to avoid collisions.
Scoring:

Large Asteroids: 20 points.
Medium Asteroids: 50 points.
Small Asteroids: 100 points.
Flying Saucers: Varying points, with the smaller ones being harder to hit but worth more points.
Difficulty Increases: As you advance, the number of asteroids increases, and they move faster. Also, the flying saucers become more aggressive in their pursuit.

Lives and Extra Lives: You start with a set number of lives, and you can earn more by reaching certain score thresholds.

Why It's Captivating:

Simplicity and Challenge: The game's simple controls and premise make it easy to understand but hard to master. The increasing difficulty keeps players engaged.

Endless Gameplay: There's no "end" to the game; the challenge is to see how long you can survive and how high you can score.

Strategic Depth: Choosing when to move, shoot, or use the hyperspace requires quick thinking and strategy, especially as the game speeds up.

Real-Life Analogy:

Imagine you're in a bumper car arena, but instead of other cars, it's filled with balloons. Your goal is to pop them all with a dart. Now, every time you pop a big balloon, two smaller ones come out. Meanwhile, you have to avoid being hit by the balloons, and occasionally, a remote-controlled drone flies by trying to tag you. The arena is circular, so if you exit on one side, you reenter on the opposite side. This gives you a sense of the continuous, wraparound space in Asteroids and the increasing challenge as you pop more balloons (or in the game, destroy more asteroids).

================================================================================================================================================================
Class structure

1. Vector2D - Utility Class
Purpose: Represents a 2-dimensional vector for positions and velocities.
Attributes: float x, float y.
Methods: Constructors, vector addition, scalar multiplication, etc.

2. GameObject - Base Class
Purpose: Base class for all game objects (ship, asteroids, bullets).
Attributes: Vector2D position, Vector2D velocity, float rotation.
Methods: Update(), Draw(), virtual methods for handling updates and drawings.

3. Spaceship - Derived from GameObject
Purpose: Represents the player's spaceship.
Attributes: Additional attributes for spaceship specifics, like int lives.
Methods: Overrides Update() for movement and shooting, Draw() for drawing the spaceship.

4. Asteroid - Derived from GameObject
Purpose: Represents asteroids of different sizes.
Attributes: int size (to differentiate between large, medium, and small).
Methods: Overrides Update() for movement, Draw() for drawing asteroids. May include method for breaking into smaller asteroids.

5. Bullet - Derived from GameObject
Purpose: Represents bullets fired by the spaceship.
Methods: Overrides Update() for movement, Draw() for drawing the bullet. Includes lifespan or distance traveled to auto-destroy.

6. Game - Main Class
Purpose: Manages game logic, window, and rendering loop.
Attributes: std::vector<Asteroid> asteroids, std::vector<Bullet> bullets, Spaceship ship, int score, bool gameOver.
Methods: Init(), Update(), Draw(), Run() (contains the game loop), SpawnAsteroid(), CheckCollisions().